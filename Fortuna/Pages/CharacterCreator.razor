@page "/CharacterCreator"
@using BlazorDownloadFile
@using System.Text.Json
@using System.Text
@using System.IO
@inject HttpClient _http
@inject IJSRuntime _jsRuntime

<div style="display: flex">
    <div class="column-left">
        <h2>Traits</h2>
    </div>

    <div class="column-center">
        <h2>Info</h2>
    </div>

    <div class="column-right">
        <h2>Stats</h2>
    </div>
</div>

<div class="character-display">
    <div class="column-container">
        <div class="column-left">
            @foreach (Trait trait in _playerSheet.Traits) {
                switch (trait.Value) {
                    case TraitValue.Good:
                        <Tooltip Text=@trait.Effects>
                            <p class="trait-good" @onclick="() => _playerSheet.Traits.Remove(trait)">[@trait.Name]</p>
                        </Tooltip>
                        break;
                    case TraitValue.Neutral:
                        <Tooltip Text=@trait.Effects>
                            <p class="trait-neutral" @onclick="() => _playerSheet.Traits.Remove(trait)">[@trait.Name]</p>
                        </Tooltip>
                        break;
                    case TraitValue.Bad:
                        <Tooltip Text=@trait.Effects>
                            <p class="trait-bad" @onclick="() => _playerSheet.Traits.Remove(trait)">[@trait.Name]</p>
                        </Tooltip>
                        break;
                    case TraitValue.Special:
                        <Tooltip Text=@trait.Effects>
                            <p class="trait-special" @onclick="() => _playerSheet.Traits.Remove(trait)">[@trait.Name]</p>
                        </Tooltip>
                        break;
                    case TraitValue.Ability:
                        <Tooltip Text=@trait.Effects>
                            <p class="trait-ability" @onclick="() => _playerSheet.Traits.Remove(trait)">[@trait.Name]</p>
                        </Tooltip>
                        break;
                    default:
                        throw new ArgumentOutOfRangeException();
                }
            }
            <RadzenDropDown TValue="string" Data="_traitsList.Keys" Change="@(TraitDropdownSelect)" AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" FilterDelay="250" AllowVirtualization="true" Style="border-radius: 0; border-color: grey; color: inherit; background: inherit; cursor: pointer"/>
            <br/>
            <button @onclick="RandomizeTraits">Random</button>
        </div>

        <div class="column-center">
            <p>
                <input @bind="_playerSheet.Name"/>
                <br/>
                <input @bind="_playerSheet.Pronoun"/>
                <br/>
                <input @bind="_playerSheet.Species"/>
                <br/>
                <input @bind="_playerSheet.Class"/>
            </p>
        </div>

        <div class="column-right">
            <p>
                @foreach (string stat in _playerSheet.Stats.Keys) {
                    <label>
                        @stat - <input @bind='_playerSheet.Stats[stat]' style="width: 30px; text-align: center" maxlength="2" inputmode="numeric"/>
                    </label>
                    <br/>
                }
            </p>
            <p style="@(_playerSheet.Stats.Values.Sum() > FortunaSheet.MaxStatPoints ? "color: red" : "")">Total - @_playerSheet.Stats.Values.Sum()/@FortunaSheet.MaxStatPoints</p>
            <button @onclick="RandomizeStats">Random</button>
        </div>
    </div>

    <img src="@_playerSheet.ImageUrl" alt="Image of the character @_playerSheet.Name." class="char-picture" height="500px"/>
    <input @bind="_playerSheet.ImageUrl" inputmode="url" class="char-url-input"/>

</div>

<textarea @bind="_playerSheet.Bio" style="width: 100%"></textarea>

<hr/>

<div style="display: flex">
    <div class="column-left">
        <h2>Inventory</h2>
    </div>

    <div class="column-right">
        <h2>Moves</h2>
    </div>
</div>

<div class="character-display">
    <div class="column-container">
        <div class="column-left">
            <table>
                <tr>
                    <td>
                        <button @onclick="AddItem">[✓]</button>
                    </td>
                    <td>
                        <input @bind="_newItemText" style="border: dimgray 1px solid; width: 100%"/>
                    </td>
                </tr>

                @foreach (string item in _playerSheet.Inventory) {
                    <tr>
                        <td>
                            <button @onclick="() => RemoveItem(item)">[🞪]</button>
                        </td>
                        <td>
                            @item
                        </td>
                    </tr>
                }
            </table>
        </div>
        <div class="column-right">
            <div class="move-flex-box" style="flex-direction: column">
                <div class="move-flex-box">
                    <button @onclick="AddMove">[✓]</button>
                    <input @bind="_newMoveText" style="border: dimgray 1px solid"/>
                    <p>On Success (10+)</p>
                    <p>On Failure (7-9)</p>
                </div>
                @foreach (string name in _playerSheet.Moves.Keys) {
                    Move move = _playerSheet.Moves[name];
                    <div class="move-flex-box">
                        <button @onclick="() => _playerSheet.Moves.Remove(name)">[🞪]</button>
                        <p>@name</p>
                        <textarea @bind="move.OnSuccess"></textarea>
                        <textarea @bind="move.OnSuccessPartial"></textarea>
                    </div>
                }
            </div>
        </div>
    </div>
</div>

<hr/>

<h2>Save/Load</h2>

<button @onclick="CopySheetToClipboard">[Copy]</button>
<button @onclick="ExportToJson">[Export]</button>
<span class="file-input-container">
    <label class="button" for="upload">[Upload]</label>
    <InputFile OnChange="ImportFromJson" hidden id="upload">[Import]</InputFile>
</span>

@_importError

@code {

    [Inject]
    public IBlazorDownloadFileService BlazorDownloadFileService { get; set; }

    /// The sheet currently being edited
    private FortunaSheet _playerSheet = new();
    /// A list of traits retrieved from traits.json with the key being the trait's 'name' and the value being the trait itself.
    private Dictionary<string, Trait> _traitsList = new() { { "Please wait...", new Trait(TraitValue.Special, "Impatient", "You didn't wait, you bastard! I asked nicely!") } };
    /// A dictionary of trait lists, with the key being the value the list contains the traits of.
    private readonly Dictionary<TraitValue, List<Trait>> _traitsValueDict = new() { { TraitValue.Ability, new List<Trait>() }, { TraitValue.Bad, new List<Trait>() }, { TraitValue.Good, new List<Trait>() }, { TraitValue.Neutral, new List<Trait>() }, { TraitValue.Special, new List<Trait>() } };

    /// Random instance for use in randomization.
    private readonly Random _random = new();

    /// Error that occurred while importing, shows up to the right of the import button
    private string _importError = "";

    /// Options used to (de)serialize the json file exports.
    private static readonly JsonSerializerOptions Options = new(JsonSerializerDefaults.Web) { WriteIndented = true, IncludeFields = true };

    /// Text in the new item text input box
    private string _newItemText = "";
    /// Text in the new move text input box
    private string _newMoveText = "";

    protected override async Task OnInitializedAsync() {
        Trait[] inputList = await _http.GetFromJsonAsync<Trait[]>("traits.json");
        if (inputList != null) {
            _traitsList = new Dictionary<string, Trait>();
            foreach (Trait trait in inputList) {
                _traitsList.Add(trait.Name, trait);
                _traitsValueDict[trait.Value].Add(trait);
            }
        }
    }

    /**
     * Called whenever the trait selection dropdown is used. Value is the string name of the trait.
     */
    private void TraitDropdownSelect(object value) {
        Trait traitToAdd = _traitsList[(string)value];
        if (_playerSheet.Traits.Contains(traitToAdd)) { return; }
        _playerSheet.Traits.Add(traitToAdd);
        _playerSheet.Traits.Sort(Trait.CompareTraitValue);
    }

    /**
     * Exports the character sheet to a .json file, for later loading with ImportFromJson().
     */
    private async Task ExportToJson() {
        await BlazorDownloadFileService.DownloadFileFromText($"{_playerSheet.Name}-{DateTime.Now:MM-dd-yy_hh-mm-ss}.json", JsonSerializer.Serialize(_playerSheet, typeof(FortunaSheet), Options), Encoding.Default, "text/json");
    }

    /**
     * Imports a character sheet from an exported .json file created by ExportToJson().
     */
    private async Task ImportFromJson(InputFileChangeEventArgs args) {
        Stream stream = args.File.OpenReadStream();
        StreamReader reader = new(stream);
        try {
            _playerSheet = JsonSerializer.Deserialize<FortunaSheet>(await reader.ReadToEndAsync(), Options);
        }
        catch (JsonException e) {
            _importError = e.Message;
        }
    }

    /**
     * Removes item specified in argument target.
     */
    private void RemoveItem(string target) {
        _playerSheet.Inventory.Remove(target);
    }

    /**
     * Adds a new item from the text specified in _newItemText
     */
    private void AddItem() {
        _playerSheet.Inventory.Add(_newItemText);
    }

    /**
     * Checks for duplicates before adding a move from the text specified in _newMoveText.
     */
    private void AddMove() {
        if (_playerSheet.Moves.ContainsKey(_newMoveText)) { return; }
        _playerSheet.Moves.Add(_newMoveText, new Move());
    }

    /**
     * Returns a markdown-compatible version of the character sheet. Doesn't include inventory or moves.
     */
    private string GetMarkdownSheet() {
        string retValue = $"# {_playerSheet.Name} #\n\nSpecies: {_playerSheet.Species}\nPronouns: {_playerSheet.Pronoun}\nClass: {_playerSheet.Class}\n";

        Dictionary<TraitValue, List<Trait>> traitsLists = new();

        foreach (Trait trait in _playerSheet.Traits) {
            if (!traitsLists.ContainsKey(trait.Value)) {
                traitsLists.Add(trait.Value, new List<Trait> { trait });
                continue;
            }
            traitsLists[trait.Value].Add(trait);
        }

        retValue += "\n## Traits ##\n";
        retValue = traitsLists.Keys.Aggregate(retValue, (current, traitVal) => current + $"### {traitVal} ###\n{string.Join('\n', traitsLists[traitVal])}\n\n");
        retValue += "\n## Stats ##\n";
        retValue = _playerSheet.Stats.Keys.Aggregate(retValue, (current, stat) => current + $"{stat}: {_playerSheet.Stats[stat]}\n");
        return $"{retValue}\nBio: {_playerSheet.Bio}";
    }

    /**
     * Copies the markdown-ified sheet into the user's clipboard by using JS interop (JS function found in js/clipboard.js)
     */
    private async Task CopySheetToClipboard() {
        string result = GetMarkdownSheet();
        await _jsRuntime.InvokeVoidAsync("clipboardCopy.copyText", result);
    }

    /**
     * Randomizes the trait selection, giving three neutral, three good, two bad, and a 1/25 chance of a special trait.
     */
    private void RandomizeTraits() {
        _playerSheet.Traits = new List<Trait>(); //Wipe it clean, start again

        for (int i = 0; i < 3; i++) {
    //TODO: Find way to make this not hardcoded for each different value, somehow
            _playerSheet.Traits.Add(GetRandomTrait(TraitValue.Neutral));
        }

        for (int i = 0; i < 3; i++) {
            _playerSheet.Traits.Add(GetRandomTrait(TraitValue.Good));
        }

        for (int i = 0; i < 2; i++) {
            _playerSheet.Traits.Add(GetRandomTrait(TraitValue.Bad));
        }

        if (_random.Next(25) == 1) {
            _playerSheet.Traits.Add(GetRandomTrait(TraitValue.Special));
        }

        _playerSheet.Traits.Sort(Trait.CompareTraitValue);
    }

    /**
     * Returns a random trait with the specified TraitValue.
     */
    private Trait GetRandomTrait(TraitValue desiredValue) {
        return _traitsValueDict[desiredValue][_random.Next(_traitsValueDict[desiredValue].Count)];
    }

    /**
     * Randomizes the stats, never actually getting to 26, getting near but never going over it.
     */
    private void RandomizeStats() {
        List<int> randomValues = new();

        for (int i = 0; i < _playerSheet.Stats.Count; i++) {
            randomValues.Add(_random.Next(10));
        }

        int j = 0;
        foreach (string stat in _playerSheet.Stats.Keys) {
            _playerSheet.Stats[stat] = (int)((float)randomValues[j] / randomValues.Sum() * FortunaSheet.MaxStatPoints); //TODO: Make this always return a sum of 26 somehow. Also simplify it.
            j++;
        }
    }
}